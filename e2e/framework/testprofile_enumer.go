// Code generated by "enumer -type=TestProfile -json"; DO NOT EDIT.

//
package framework

import (
	"encoding/json"
	"fmt"
)

const (
	_TestProfileName_0 = "TestGenericTestStash"
	_TestProfileName_1 = "TestInit"
	_TestProfileName_2 = "TestExporter"
	_TestProfileName_3 = "TestUpgrade"
	_TestProfileName_4 = "TestHorizontalScaling"
	_TestProfileName_5 = "TestVerticalScaling"
	_TestProfileName_6 = "TestVolumeExpansion"
	_TestProfileName_7 = "TestCustomConfig"
	_TestProfileName_8 = "TestRotateCertificates"
)

var (
	_TestProfileIndex_0 = [...]uint8{0, 11, 20}
	_TestProfileIndex_1 = [...]uint8{0, 8}
	_TestProfileIndex_2 = [...]uint8{0, 12}
	_TestProfileIndex_3 = [...]uint8{0, 11}
	_TestProfileIndex_4 = [...]uint8{0, 21}
	_TestProfileIndex_5 = [...]uint8{0, 19}
	_TestProfileIndex_6 = [...]uint8{0, 19}
	_TestProfileIndex_7 = [...]uint8{0, 16}
	_TestProfileIndex_8 = [...]uint8{0, 22}
)

func (i TestProfile) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _TestProfileName_0[_TestProfileIndex_0[i]:_TestProfileIndex_0[i+1]]
	case i == 4:
		return _TestProfileName_1
	case i == 8:
		return _TestProfileName_2
	case i == 16:
		return _TestProfileName_3
	case i == 32:
		return _TestProfileName_4
	case i == 64:
		return _TestProfileName_5
	case i == 128:
		return _TestProfileName_6
	case i == 256:
		return _TestProfileName_7
	case i == 512:
		return _TestProfileName_8
	default:
		return fmt.Sprintf("TestProfile(%d)", i)
	}
}

var _TestProfileValues = []TestProfile{1, 2, 4, 8, 16, 32, 64, 128, 256, 512}

var _TestProfileNameToValueMap = map[string]TestProfile{
	_TestProfileName_0[0:11]:  1,
	_TestProfileName_0[11:20]: 2,
	_TestProfileName_1[0:8]:   4,
	_TestProfileName_2[0:12]:  8,
	_TestProfileName_3[0:11]:  16,
	_TestProfileName_4[0:21]:  32,
	_TestProfileName_5[0:19]:  64,
	_TestProfileName_6[0:19]:  128,
	_TestProfileName_7[0:16]:  256,
	_TestProfileName_8[0:22]:  512,
}

// TestProfileString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TestProfileString(s string) (TestProfile, error) {
	if val, ok := _TestProfileNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TestProfile values", s)
}

// TestProfileValues returns all values of the enum
func TestProfileValues() []TestProfile {
	return _TestProfileValues
}

// IsATestProfile returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TestProfile) IsATestProfile() bool {
	for _, v := range _TestProfileValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TestProfile
func (i TestProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TestProfile
func (i *TestProfile) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TestProfile should be a string, got %s", data)
	}

	var err error
	*i, err = TestProfileString(s)
	return err
}
